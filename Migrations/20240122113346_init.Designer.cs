// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using NotAlone.Data;

#nullable disable

namespace NotAlone.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240122113346_init")]
    partial class init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("NotAlone.Models.AnalyticsModel", b =>
                {
                    b.Property<int>("analytics_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("analytics_id"));

                    b.Property<string>("analytics_group_ids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("analytics_user_ids")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("hash_tags")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("is_active")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_active_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("total_new_friend_requests")
                        .HasColumnType("int");

                    b.Property<int?>("total_new_messages")
                        .HasColumnType("int");

                    b.Property<int?>("total_new_notifications")
                        .HasColumnType("int");

                    b.Property<int?>("total_new_reports")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("analytics_id");

                    b.ToTable("analytics");
                });

            modelBuilder.Entity("NotAlone.Models.CommentRepliesLikesModel", b =>
                {
                    b.Property<int>("comment_replies_liked_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_replies_liked_id"));

                    b.Property<int?>("comment_reply_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("liked_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("comment_replies_liked_id");

                    b.HasIndex("user_id");

                    b.ToTable("commentRepliesLikes");
                });

            modelBuilder.Entity("NotAlone.Models.CommentRepliesModel", b =>
                {
                    b.Property<int>("replied_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("replied_id"));

                    b.Property<int?>("comment_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("repleid_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("replied_txt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("total_likes")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("replied_id");

                    b.HasIndex("user_id");

                    b.ToTable("commentReplies");
                });

            modelBuilder.Entity("NotAlone.Models.CommentsCountingInformationModel", b =>
                {
                    b.Property<int>("comments_counting_info_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comments_counting_info_id"));

                    b.Property<int?>("comments_id")
                        .HasColumnType("int");

                    b.Property<int?>("total_likes")
                        .HasColumnType("int");

                    b.Property<int?>("total_replies")
                        .HasColumnType("int");

                    b.HasKey("comments_counting_info_id");

                    b.ToTable("commentsCountingInformation");
                });

            modelBuilder.Entity("NotAlone.Models.CommentsLikesModel", b =>
                {
                    b.Property<int>("liked_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("liked_id"));

                    b.Property<int?>("comment_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("liked_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("liked_id");

                    b.HasIndex("user_id");

                    b.ToTable("commentLikes");
                });

            modelBuilder.Entity("NotAlone.Models.DeleteLastMessageUserModel", b =>
                {
                    b.Property<int>("delete_last_message_userId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("delete_last_message_userId"));

                    b.Property<DateTime>("delete_time")
                        .HasColumnType("datetime2");

                    b.Property<int>("message_id")
                        .HasColumnType("int");

                    b.Property<int>("user_id")
                        .HasColumnType("int");

                    b.HasKey("delete_last_message_userId");

                    b.HasIndex("message_id");

                    b.ToTable("deleteLastMessageUsers");
                });

            modelBuilder.Entity("NotAlone.Models.FollowersModel", b =>
                {
                    b.Property<int>("followers_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("followers_id"));

                    b.Property<int?>("follower_user_id")
                        .HasColumnType("int");

                    b.Property<DateTime>("following_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("following_user_id")
                        .HasColumnType("int");

                    b.HasKey("followers_id");

                    b.HasIndex("follower_user_id");

                    b.HasIndex("following_user_id");

                    b.ToTable("followers");
                });

            modelBuilder.Entity("NotAlone.Models.FriendRequestsModel", b =>
                {
                    b.Property<int>("request_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("request_id"));

                    b.Property<int?>("reciever_id")
                        .HasColumnType("int");

                    b.Property<bool?>("request_status")
                        .HasColumnType("bit");

                    b.Property<DateTime>("request_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("sender_id")
                        .HasColumnType("int");

                    b.HasKey("request_id");

                    b.HasIndex("reciever_id");

                    b.HasIndex("sender_id");

                    b.ToTable("friendRequests");
                });

            modelBuilder.Entity("NotAlone.Models.FriendsModel", b =>
                {
                    b.Property<int>("friendship_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("friendship_id"));

                    b.Property<DateTime>("friendship_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user1_id")
                        .HasColumnType("int");

                    b.Property<int?>("user2_id")
                        .HasColumnType("int");

                    b.HasKey("friendship_id");

                    b.HasIndex("user1_id");

                    b.HasIndex("user2_id");

                    b.ToTable("friends");
                });

            modelBuilder.Entity("NotAlone.Models.GroupMembersModel", b =>
                {
                    b.Property<int>("group_membership_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("group_membership_id"));

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<string>("membership_status")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<DateTime>("membership_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("group_membership_id");

                    b.HasIndex("group_id");

                    b.HasIndex("user_id");

                    b.ToTable("groupMembers");
                });

            modelBuilder.Entity("NotAlone.Models.GroupsModel", b =>
                {
                    b.Property<int>("group_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("group_id"));

                    b.Property<string>("gorup_description_txt")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<string>("gorup_name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<int?>("group_admin_id")
                        .HasColumnType("int");

                    b.Property<string>("group_bg_img_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("group_creation_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("group_img_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool?>("is_group_public")
                        .HasColumnType("bit");

                    b.Property<int?>("total_members")
                        .HasColumnType("int");

                    b.HasKey("group_id");

                    b.HasIndex("group_admin_id");

                    b.ToTable("groups");
                });

            modelBuilder.Entity("NotAlone.Models.MessageConversationModel", b =>
                {
                    b.Property<int>("messages_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("messages_id"));

                    b.Property<int?>("delete_onlyFor_user_id")
                        .HasColumnType("int");

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<bool?>("is_seen")
                        .HasColumnType("bit");

                    b.Property<string>("message_files_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("message_txt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("messages_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("reciever_id")
                        .HasColumnType("int");

                    b.Property<int?>("sender_id")
                        .HasColumnType("int");

                    b.HasKey("messages_id");

                    b.HasIndex("reciever_id");

                    b.ToTable("messageConversations");
                });

            modelBuilder.Entity("NotAlone.Models.MessageModel", b =>
                {
                    b.Property<int>("message_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("message_id"));

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<bool?>("isText")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_group_message")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("last_messages_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("last_txt")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<bool?>("new_message_arrive")
                        .HasColumnType("bit");

                    b.Property<int?>("sender_id")
                        .HasColumnType("int");

                    b.Property<int?>("user1_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("user2_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.HasKey("message_id");

                    b.HasIndex("group_id");

                    b.HasIndex("user1_id");

                    b.HasIndex("user2_id");

                    b.ToTable("messages");
                });

            modelBuilder.Entity("NotAlone.Models.NotificationModel", b =>
                {
                    b.Property<int>("notification_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("notification_id"));

                    b.Property<int?>("from_user_id")
                        .HasColumnType("int");

                    b.Property<bool?>("is_read")
                        .HasColumnType("bit");

                    b.Property<DateTime>("notification_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("notification_type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("source_id")
                        .IsRequired()
                        .HasColumnType("int");

                    b.Property<int?>("to_user_id")
                        .HasColumnType("int");

                    b.HasKey("notification_id");

                    b.HasIndex("from_user_id");

                    b.ToTable("notifications");
                });

            modelBuilder.Entity("NotAlone.Models.PostCommentsModel", b =>
                {
                    b.Property<int>("comment_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("comment_id"));

                    b.Property<DateTime>("comment_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("comment_txt")
                        .IsRequired()
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("comment_id");

                    b.HasIndex("user_id");

                    b.ToTable("postComments");
                });

            modelBuilder.Entity("NotAlone.Models.PostLikesModel", b =>
                {
                    b.Property<int>("likes_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("likes_id"));

                    b.Property<DateTime>("liked_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("likes_id");

                    b.HasIndex("user_id");

                    b.ToTable("postLikes");
                });

            modelBuilder.Entity("NotAlone.Models.PostModel", b =>
                {
                    b.Property<int>("post_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("post_id"));

                    b.Property<int?>("group_id")
                        .HasColumnType("int");

                    b.Property<bool?>("is_group_post")
                        .HasColumnType("bit");

                    b.Property<bool?>("is_shared_post")
                        .HasColumnType("bit");

                    b.Property<string>("place")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("post_file_urls")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("post_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("posts_counting_info_id")
                        .HasColumnType("int");

                    b.Property<int?>("shared_post_id")
                        .HasColumnType("int");

                    b.Property<string>("text")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("post_id");

                    b.HasIndex("group_id");

                    b.HasIndex("posts_counting_info_id");

                    b.HasIndex("shared_post_id");

                    b.HasIndex("user_id");

                    b.ToTable("posts");
                });

            modelBuilder.Entity("NotAlone.Models.PostsCountingInformationModel", b =>
                {
                    b.Property<int>("posts_counting_info_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("posts_counting_info_id"));

                    b.Property<int?>("post_id")
                        .HasColumnType("int");

                    b.Property<int?>("total_comments")
                        .HasColumnType("int");

                    b.Property<int?>("total_likes")
                        .HasColumnType("int");

                    b.Property<int?>("total_shares")
                        .HasColumnType("int");

                    b.HasKey("posts_counting_info_id");

                    b.ToTable("postsCountingInformation");
                });

            modelBuilder.Entity("NotAlone.Models.ReportsModel", b =>
                {
                    b.Property<int>("report_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("report_id"));

                    b.Property<string>("report_description_txt")
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)");

                    b.Property<DateTime>("report_time")
                        .HasColumnType("datetime2");

                    b.Property<string>("report_type")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("reportedBy_user_id")
                        .HasColumnType("int");

                    b.Property<int?>("reportedTo_user_id")
                        .HasColumnType("int");

                    b.Property<int?>("reported_item_id")
                        .HasColumnType("int");

                    b.HasKey("report_id");

                    b.ToTable("reports");
                });

            modelBuilder.Entity("NotAlone.Models.UserModel", b =>
                {
                    b.Property<int>("user_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("user_id"));

                    b.Property<string>("address")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("analytics_id")
                        .HasColumnType("int");

                    b.Property<string>("baground_picture_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("email")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("first_name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("last_name")
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)");

                    b.Property<string>("password")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<string>("profile_picture_url")
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("user_registration_time")
                        .HasColumnType("datetime2");

                    b.Property<int?>("usersCountingInformation_id")
                        .HasColumnType("int");

                    b.HasKey("user_id");

                    b.HasIndex("analytics_id");

                    b.HasIndex("usersCountingInformation_id");

                    b.ToTable("users");
                });

            modelBuilder.Entity("NotAlone.Models.UsersCountingInformationModel", b =>
                {
                    b.Property<int>("usersCountingInformation_id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("usersCountingInformation_id"));

                    b.Property<int?>("total_followers")
                        .HasColumnType("int");

                    b.Property<int?>("total_followings")
                        .HasColumnType("int");

                    b.Property<int?>("total_friends")
                        .HasColumnType("int");

                    b.Property<int?>("user_id")
                        .HasColumnType("int");

                    b.HasKey("usersCountingInformation_id");

                    b.ToTable("usersCounting");
                });

            modelBuilder.Entity("NotAlone.Services.Implementation.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("NotAlone.Services.Implementation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("NotAlone.Services.Implementation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotAlone.Services.Implementation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("NotAlone.Services.Implementation.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("NotAlone.Models.CommentRepliesLikesModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.CommentRepliesModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.CommentsLikesModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.DeleteLastMessageUserModel", b =>
                {
                    b.HasOne("NotAlone.Models.MessageModel", "last_message")
                        .WithMany("deleted_last_message_users")
                        .HasForeignKey("message_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("last_message");
                });

            modelBuilder.Entity("NotAlone.Models.FollowersModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "follower_user")
                        .WithMany()
                        .HasForeignKey("follower_user_id");

                    b.HasOne("NotAlone.Models.UserModel", "following_user")
                        .WithMany()
                        .HasForeignKey("following_user_id");

                    b.Navigation("follower_user");

                    b.Navigation("following_user");
                });

            modelBuilder.Entity("NotAlone.Models.FriendRequestsModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "reciever")
                        .WithMany()
                        .HasForeignKey("reciever_id");

                    b.HasOne("NotAlone.Models.UserModel", "sender")
                        .WithMany()
                        .HasForeignKey("sender_id");

                    b.Navigation("reciever");

                    b.Navigation("sender");
                });

            modelBuilder.Entity("NotAlone.Models.FriendsModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user1")
                        .WithMany()
                        .HasForeignKey("user1_id");

                    b.HasOne("NotAlone.Models.UserModel", "user2")
                        .WithMany()
                        .HasForeignKey("user2_id");

                    b.Navigation("user1");

                    b.Navigation("user2");
                });

            modelBuilder.Entity("NotAlone.Models.GroupMembersModel", b =>
                {
                    b.HasOne("NotAlone.Models.GroupsModel", "group")
                        .WithMany("members")
                        .HasForeignKey("group_id");

                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("group");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.GroupsModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "groupAdmin")
                        .WithMany()
                        .HasForeignKey("group_admin_id");

                    b.Navigation("groupAdmin");
                });

            modelBuilder.Entity("NotAlone.Models.MessageConversationModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("reciever_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.MessageModel", b =>
                {
                    b.HasOne("NotAlone.Models.GroupsModel", "groups")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.HasOne("NotAlone.Models.UserModel", "user1")
                        .WithMany()
                        .HasForeignKey("user1_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("NotAlone.Models.UserModel", "user2")
                        .WithMany()
                        .HasForeignKey("user2_id")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("groups");

                    b.Navigation("user1");

                    b.Navigation("user2");
                });

            modelBuilder.Entity("NotAlone.Models.NotificationModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "fromUser")
                        .WithMany()
                        .HasForeignKey("from_user_id");

                    b.Navigation("fromUser");
                });

            modelBuilder.Entity("NotAlone.Models.PostCommentsModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.PostLikesModel", b =>
                {
                    b.HasOne("NotAlone.Models.UserModel", "user")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("user");
                });

            modelBuilder.Entity("NotAlone.Models.PostModel", b =>
                {
                    b.HasOne("NotAlone.Models.GroupsModel", "groups")
                        .WithMany()
                        .HasForeignKey("group_id");

                    b.HasOne("NotAlone.Models.PostsCountingInformationModel", "postsCountingInformation")
                        .WithMany()
                        .HasForeignKey("posts_counting_info_id");

                    b.HasOne("NotAlone.Models.PostModel", "sharedPost")
                        .WithMany()
                        .HasForeignKey("shared_post_id");

                    b.HasOne("NotAlone.Models.UserModel", "users")
                        .WithMany()
                        .HasForeignKey("user_id");

                    b.Navigation("groups");

                    b.Navigation("postsCountingInformation");

                    b.Navigation("sharedPost");

                    b.Navigation("users");
                });

            modelBuilder.Entity("NotAlone.Models.UserModel", b =>
                {
                    b.HasOne("NotAlone.Models.AnalyticsModel", "analytics")
                        .WithMany()
                        .HasForeignKey("analytics_id");

                    b.HasOne("NotAlone.Models.UsersCountingInformationModel", "usersCounting")
                        .WithMany()
                        .HasForeignKey("usersCountingInformation_id");

                    b.Navigation("analytics");

                    b.Navigation("usersCounting");
                });

            modelBuilder.Entity("NotAlone.Models.GroupsModel", b =>
                {
                    b.Navigation("members");
                });

            modelBuilder.Entity("NotAlone.Models.MessageModel", b =>
                {
                    b.Navigation("deleted_last_message_users");
                });
#pragma warning restore 612, 618
        }
    }
}
